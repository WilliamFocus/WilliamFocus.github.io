(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{602:function(e,r,o){"use strict";o.r(r);var s=o(4),t=Object(s.a)({},(function(){var e=this,r=e.$createElement,o=e._self._c||r;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h2",{attrs:{id:"promise-api"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#promise-api"}},[e._v("#")]),e._v(" Promise API")]),e._v(" "),o("p",[o("strong",[e._v("（——promise 的 resolve()方法会将结果保存在 promise 实例中，可以通过 then 方法的回调参数中获取）")])]),e._v(" "),o("hr"),e._v(" "),o("p",[o("code",[e._v("Promise.resolve(......)")]),e._v(" 参数可以为：")]),e._v(" "),o("ol",[o("li",[e._v("promise：不操作，直接返回该 promise 实例；")]),e._v(" "),o("li",[e._v("含有 then 方法的对象：则会执行该对象的 then 方法，并将结果 resolve 到返回的新 promise 对象中；（即将原对象 then 的回调参数中的数据转到新返回的 promise 对象的 then 方法中）")]),e._v(" "),o("li",[e._v("无 then 方法对象或非对象：会将该值作为新返回的 promise 对象的 then 方法回调中的值；（即相当于新返回 promise 对象 resolve 了这个值）")]),e._v(" "),o("li",[e._v("不带参数：返回一个直接为 resolve 状态的 promise 对象；")])]),e._v(" "),o("hr"),e._v(" "),o("p",[o("code",[e._v("promise.then(......)")]),e._v(" 为链式调用，将会永远返回一个 promise 实例对象：")]),e._v(" "),o("ol",[o("li",[e._v("then 回调中返回一个 promise：直接返回；")]),e._v(" "),o("li",[e._v("then 回调中返回一个非 promise 值：则该值直接作为"),o("code",[e._v("resolve(...)")]),e._v("的参数保存在新返回的 promise 实例对象中；")])])])}),[],!1,null,null,null);r.default=t.exports}}]);