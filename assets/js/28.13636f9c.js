(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{607:function(t,s,a){"use strict";a.r(s);var e=a(4),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("hr"),t._v(" "),a("h2",{attrs:{id:"map-构造函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#map-构造函数"}},[t._v("#")]),t._v(" Map 构造函数")]),t._v(" "),a("p",[a("strong",[t._v("（——Map 结构提供了“任意 key 值—任意 value 值”的对应，是一种更完善的 Hash 结构实现）")])]),t._v(" "),a("div",{staticClass:"language-tsx line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-tsx"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Map(......) 的参数必须是一个可迭代对象，即实现 Iterator 接口")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 且每个成员都是一个双元素的数组的数据结构")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" map "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// Map(2) {"a" => 1, "b" => 2}')]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[a("code",[t._v("Met.prototype.size")]),t._v("：返回 Map 结构的成员总数")]),t._v(" "),a("p",[a("strong",[t._v("API：")])]),t._v(" "),a("p",[a("strong",[t._v("操作方法：")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Map.prototype.set(key, value)")]),t._v("：设置键名 key 对应的键值为 value。\n（可链式， 覆盖，"),a("code",[t._v("-0===+0")]),t._v("，"),a("code",[t._v("NaN===NaN")]),t._v("）")]),t._v(" "),a("li",[a("code",[t._v("Map.prototype.get(key)")]),t._v("：读取 key 对应的键值 value。")]),t._v(" "),a("li",[a("code",[t._v("Map.prototype.has(key)")]),t._v("：返回一个布尔值，表示某个键是否在当前 Map 对象之中。")]),t._v(" "),a("li",[a("code",[t._v("Map.prototype.delete(key)")]),t._v("：删除某个键，返回 true；如果删除失败，返回 false。")]),t._v(" "),a("li",[a("code",[t._v("Map.prototype.clear()")]),t._v("：删除某个键，返回 true；如果删除失败，返回 false。")])]),t._v(" "),a("p",[a("strong",[t._v("遍历方法：")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Map.prototype.keys()")]),t._v("：返回键名的遍历器。")]),t._v(" "),a("li",[a("code",[t._v("Map.prototype.values()")]),t._v("：返回键值的遍历器。")]),t._v(" "),a("li",[a("code",[t._v("Map.prototype.entries()")]),t._v("：返回所有成员的遍历器。")]),t._v(" "),a("li",[a("code",[t._v("Map.prototype.forEach()")]),t._v("：遍历 Map 的所有成员。")])]),t._v(" "),a("p",[a("strong",[t._v("作用：")])]),t._v(" "),a("ol",[a("li",[t._v("使用对象作为键名，可以解决扩展他人库时同名属性碰撞；")])]),t._v(" "),a("p",[a("strong",[t._v("注意：")])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",[t._v("📍 1、直接用 for...of 等"),a("strong",[t._v("迭代")]),t._v(" Map 构造函数的 "),a("strong",[t._v("实例")]),t._v("得到的值是一个数组；")])])])}),[],!1,null,null,null);s.default=n.exports}}]);